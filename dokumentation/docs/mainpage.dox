/**
@mainpage PIC SID Project

Undersøgelse af forskellige måder at lave lyd når man bruger en PIC kreds<br/>

<h2>Mål med projektet:</h2>

<h4>Simpel lyd PWM styret lyd</h4>
- Undersøgelse af mulighed for lyd ud på 1 pin
- Simpel timer styring af frekvenser
- Afspille musik på 1 pin
- Flere kanaler

<h4>Bedre lyd og lydeffekter</h4>
Optimering af 50/50 duty cycle afspilning på de enkelte pins for at lave effekter
- Reverb: ændre duty cycle dynamisk

<h4>Afspilning af samples</h4>
- Der er kraftige begrænsning på pladsen i PIC kredsen

<h4>Forskellig forstærkning/mixing af lydkanaler</h4>
- Software mixing - Logisk OR på output kanal.
- Digital mixing f.eks. med CD4078B CMOS 8-Input NOR/OR Gate
- Multichannel mixing, med mulighed for forskellige filter på hver kanal

<h4>DDS med forskellige waveforms - mere lig en rigtig synthesizer</h2>
- Ekstern DAC.<br/>Den interne DAC i PIC18 er kun 5 bit, så det kunne være lidt sjovere at bruge eks. 8 bit DAC
- Påskolen har vi PM7524HP til rådighed. Den må kunne bruges til noget.
- Lege med Direct Digital Synthesis, feks. AD9830<br/>
https://www.analog.com/en/analog-dialogue/articles/all-about-direct-digital-synthesis.html

<h4>Læsning af filer fra SD-kort</h4>
- Lære SPI om forbindelser
- SPI forbindelse til SD-kort læser

<h4>SID filer</h4>
-Fortolkning
-Afspilning
-Konvertering<br/>
SID filer indeholder kode rettet mod afspilning på C64 enhed eller emulator. Indeholder afspiller
rettet mod C64 SID chippen. Det må kunne udtrækkes på mere kompatibel måde.
- Konvertering af reSID dump filer<br/>
reSID har mulighed for at lave dump filer af loadede SID filer. Indeholder alle data som 
gives til SID chippen i et sekventielt format. En gennemgang af data kunne udtrække lyde
og patterns til et mere læsbart format.

<h4>Live performance efekter</h4>
- Keyboard input
- Midi input

<hr/>

<h2>Projekt struktur:</h2>
[TODO] Visning af struktur<br/>
- docs
- lib / music_lib<br/>

<hr/>

<h2>Kilder og yderligere læring</h2>
<h4>Om lyd, signaler og sampling</h4>
- Tutorialspoint - Digital Communication Tutorial<br/>https://www.tutorialspoint.com/digital_communication/index.htm
Question: (a) A 4-bit PCM System With A Code Word Allocation As Shown In - https://www.chegg.com/homework-help/questions-and-answers/4-bit-pcm-system-code-word-allocation-shown-table-1-using-ami-bipolar-rz-line-code-produce-q32160024
- WIkipedia: Pulse-code modulation - https://en.wikipedia.org/wiki/Pulse-code_modulation
- WikiPedia: Ring modulation - https://en.wikipedia.org/wiki/Ring_modulation
- WikiPedia: Audio bit depth - https://en.wikipedia.org/wiki/Audio_bit_depth
- Wikipedia: Duty cycle - https://en.wikipedia.org/wiki/Duty_cycle
- 2.1 Pitch, Frequency, Period, Loudness, Timbre - https://www.phys.uconn.edu/~gibson/Notes/Section2_1/Sec2_1.htm

<h4>Om fil typer</h4>
- Error reading a .PCM file - https://dsp.stackexchange.com/questions/55436/error-reading-a-pcm-file
- From Python to silicon: Continuous Sinus Waveform Generator - http://old.myhdl.org/doku.php/projects:continuous_wave_sinusgenerator
- SIDcog v1.3<br/>
SIDcog v1.3 - http://obex.parallax.com/object/532<br/>
parallaxinc/propeller - https://github.com/parallaxinc/propeller/tree/master/libraries/community/p1/All/SIDcog%20v1.3<br/>
parallaxinc/propeller - https://github.com/parallaxinc/propeller/tree/master/libraries/community/p1/All/SIDcog%20v1.3/ExamplePlayRoutine<br/>
parallaxinc/propeller - https://github.com/parallaxinc/propeller/tree/master/libraries/community/p1/All/SIDcog%20v1.3/ExampleSidDumpPlay<br/>
parallaxinc/sound-library - https://learn.parallax.com/support/reference/sound-library<br/>

- SID filer<br/>
SID File Format - https://gist.github.com/cbmeeks/2b107f0a8d36fc461ebb056e94b2f4d6
SID/PSID (Various SIDPlay / PlaySID Formats) - http://unusedino.de/ec64/technical/formats/sidplay.html
Kick Assembler: 12.3. Import of SID Files - http://www.theweb.dk/KickAssembler/webhelp/content/ch12s03.html
- Wikipedea: reSID  - https://en.wikipedia.org/wiki/ReSID
- Rust implementering af reSID: https://github.com/digitalstreamio/resid-rs/tree/master/src

- Midifile: C++ library for parsing Standard MIDI Files - https://midifile.sapp.org/
- http://www.cs.uccs.edu/~cs525/midi/midi.html
- http://somascape.org/midi/tech/mfile.html
- http://www.music.mcgill.ca/~ich/classes/mumt306/StandardMIDIfileformat.html
- https://docplayer.net/21829130-Midi-specification-introduction-conventions-hardware-midi-musical-instrument-digital-interface-specification-1-0.html
- http://www.opensound.com/dmguide/dmmidi.html
- https://www.link.cs.cmu.edu/melisma/melisma2003/mftext/midifile.h
- https://www.link.cs.cmu.edu/melisma/melisma2003/mftext/midifile.c
- https://github.com/BYVoid/notes_extract/blob/master/midifile.c
- https://github.com/craigsapp/midifile/blob/master/src/MidiFile.cpp

<h4>Rotary Encoder</h4>
- https://forum.arduino.cc/index.php?topic=363619.0
- https://perhof.wordpress.com/2012/11/01/using-rotary-encoders-with-arduino/
- https://farm3.static.flickr.com/2186/3616369210_ac2b35f598_o.png
- https://forum.arduino.cc/index.php?topic=18387.0

<h4>Lyde og samples</h4>
- https://samplefocus.com/categories/piano

<hr/>

<h2>Værktøjer</h2>
- JSIDPlay2<br/>User Guide: https://haendel.ddns.net/~ken/UserGuide.html
- Komprimering af data<br/>
WIkipedia: Run-length encoding</br>
Websidehttps://en.wikipedia.org/wiki/Run-length_encoding


<hr/>

<h2>Inspiration:</h2>
<h4>Roman Black</h4>
Har lavet en fantatisk side om lyd rettet mod microcontrollere som pic, atmel o.lign. Han beskriver de forskellige 
metoder og algoritmer til konvertering af normal 8-bit PCM sound til 1 bit lydfil og han har lavet software til at 
lave selve konverteringen.<br/>
Webside:</br/>
www.RomanBlack.com og man kan finde software på https://livet.se/mahoney/

<h4>Libsidplayfp</h4>
og konsol version sidplayfp er en gren af projektet sidplay2. Er lavet til at simulere og forbedre 
afspilningskvalitet i emulering af 6581 og 8580 chips, 
and the surrounding C64 system in order to play SID music better.<br/>
Webside:<br/>
http://sourceforge.net/projects/sidplay-residfp/

Libsidplayfp indeholder mulighed for tilslutning af hardware løsninger, som jeg ser bort fra i dette projekt:<br/>
@exSID
http://hacks.slashdirt.org/hw/exsid/

@HardSID
[TODO] Link

Webside: sidplay2<br/>
Der findes en side for dette projekt, men det ser ud som om den ikke er vedligeholdt efter 2004<br/>
http://sidplay2.sourceforge.net/

<hr/>
@section other_projects Andre interessante projekter
- Audio Sample Player<br/>
This project describes a simpble ATtiny85 application to output a short sample of digital audio through a loudspeaker. It can play a one-second sample of any digitised audio using just a loudspeaker and no other components<br/>
Webside: http://www.technoblogy.com/show?QBB<br/>
- Tiny MIDI Player<br/>
This is an ATtiny85-based digital music box that will play a tune stored in memory in MIDI format<br/>
Webside: http://www.technoblogy.com/show?2E6L
- PIC sound player (PCM to PWM converter)<br/>
This project makes a PIC microcontroller play audio PCM sounds using PWM modulation! It is designed to be a research project.<br/>
Webside: http://www.enide.net/webcms/index.php?page=pcm2pwm



-----------------------------------------------------------------------------

 This program is free software; you can redistribute it and/or modify<br/>
 it under the terms of the GNU General Public License as published by<br/>
 the Free Software Foundation; either version 2 of the License, or<br/>
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,<br/>
 but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br/>
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License<br/>
 along with this program; if not, write to the Free Software<br/>
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

-----------------------------------------------------------------------------

\example main.c
*/