#***********************************************************************
#*     HerMIDI test-bench     (gpism 'startup configuration' file)     *
#*********************************************************************** 

#-------prepare environment (generate signals & connections)-------
echo 
echo HerMIDI testbench
#load s receiver-PIC.cod   #unfortunately gpsim support only 1 CPU yet,
load s HerMIDI-PIC.cod     #but we can simulate C64 IEC bus inputs

#set CPU frequencies
frequency 4000000
#p12f509.frequency=4000000    #4MHz like HerMIDI
#p12f508.frequency=1000000    #1MHz like C64

#Display PIC details (name,pin-state):
processor
#echo Initial state:
#processor pins

#If needed, connect some modules to debug the system, overcomplicated :(
#module library libgpsim_modules.so
#module load led_7segments DigitDisplay1
#DigitDisplay1.color = green
#DigitDisplay1.xpos = 60
#DigitDisplay1.ypos = 48

#stimulus for ATN,DATA,CLK,MIDI,etc. - generated by 'stimgen.py' script
load c stimulus.stc

#attach the MIDI signal to HerMIDI input (GPIO3 input-only pin)
node MIDI_node
attach MIDI_node MIDI_signal gpio3
#attach ATN-signal to HerMIDI input (GPIO4)
node ATN_node
attach ATN_node ATN_signal gpio4
#attach DATA-signal to HerMIDI input (GPIO2)
node DATA_node
attach DATA_node DATA_signal gpio2
#attach CLK-signal to HerMIDI input (GPIO5)
node CLK_node
attach CLK_node CLK_signal gpio5


#---------------------perform the simulation-----------------------
processor pins
#stimulus            #display stimuli, type & state of PIC-pins
echo

break e StandBy      #set breakpoint
run
echo
echo ---------------- AT STAND-BY: ------------------
dump
clear 0              #clear breakpoint

break e PowerOn      #set breakpoint
run
echo
echo ---------------- AT POWER-ON: ------------------
dump
clear 0              #clear breakpoint

echo
break c 80000        #end testing after this amount of cycles
run
echo
echo ------- AFTER RECEIVING MANY MIDI-BYTES --------
#display pins & RAM status (registers, files)
dump
